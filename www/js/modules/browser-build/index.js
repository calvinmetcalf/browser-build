(function(){require.register('browser-build/index',function(module,exports,require){// Generated by CoffeeScript 1.6.2
(function() {
  var buildBrowserTestFile, buildCommon, buildFile, buildIncludes, buildStatic, check, copyRequire, copySourceMap, deleteFile, fs, getBaseModuleName, getDependencies, getInputDirectory, getInputKeyValueForFile, getModuleId, getOutputFile, getOutputModuleDirectory, log, np, utility, watcher;

  require('sugar');

  utility = require("./utility");

  watcher = require("./watcher");

  np = require("path");

  fs = require('fs');

  log = function(config, message) {
    if (!config.silent) {
      return console.log(message);
    }
  };

  getInputKeyValueForFile = function(config, file) {
    var input, name, _ref;

    _ref = config.input;
    for (name in _ref) {
      input = _ref[name];
      if (Object.isString(input)) {
        if (file.startsWith(input)) {
          return [name, input];
        }
      }
    }
    throw new Error("input not found in config.input: " + file);
  };

  getInputDirectory = function(config, file) {
    return getInputKeyValueForFile(config, file)[1];
  };

  getBaseModuleName = function(config, file) {
    return getInputKeyValueForFile(config, file)[0];
  };

  getModuleId = function(config, file) {
    var inputDirectory, name, path;

    name = getBaseModuleName(config, file);
    inputDirectory = getInputDirectory(config, file);
    path = np.relative(inputDirectory, file);
    path = path.replace(/\\/g, "\/");
    path = name + "/" + path;
    path = path.replace(/\/$/, "");
    return path = path.replace(/\.js$/, "");
  };

  getOutputModuleDirectory = function(config) {
    return np.join(config.output.directory, "modules");
  };

  getOutputFile = function(config, file, id) {
    if (id == null) {
      id = getModuleId(config, file);
    }
    return file = np.normalize(np.join(getOutputModuleDirectory(config), id) + ".js");
  };

  deleteFile = function(file) {
    if (fs.existsSync(file)) {
      return fs.unlinkSync(file);
    }
  };

  buildBrowserTestFile = function(config) {
    var outputFolder, testFolder, type;

    type = config.output.test;
    if (type == null) {
      return;
    }
    testFolder = np.join(__dirname, "../test", type);
    if (!fs.existsSync(testFolder)) {
      throw new Error("Test files for " + type + " not found, expected at " + testFolder);
    }
    outputFolder = np.join(config.output.directory, "test");
    return utility.copy(testFolder, outputFolder);
  };

  copySourceMap = function(config, inputFile, outputFile, deleteOutput) {
    var copyTo, e, index, map, mapInput, mapOutput, shortName, source, _i, _len, _ref;

    if (deleteOutput == null) {
      deleteOutput = false;
    }
    mapInput = inputFile.replace(/\.js$/, ".map");
    mapOutput = outputFile.replace(/\.js$/, ".map");
    if (fs.existsSync(mapInput)) {
      try {
        map = JSON.parse(utility.read(mapInput));
      } catch (_error) {
        e = _error;
        map = {
          sourceRoot: ".",
          sources: []
        };
      }
      _ref = map.sources;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        source = _ref[index];
        source = np.join(np.dirname(mapInput), map.sourceRoot, source);
        copyTo = np.join(np.dirname(mapOutput), shortName = source.split(/[\/\\]/g).pop());
        if (deleteOutput) {
          deleteFile(copyTo);
        } else {
          if (!fs.existsSync(source)) {
            console.warn("Source not found: " + mapInput + " -> " + source);
            continue;
          }
          utility.copy(source, copyTo);
        }
        map.sources[index] = shortName;
      }
      map.sourceRoot = ".";
      if (deleteOutput) {
        deleteFile(mapInput);
        return deleteFile(mapOutput);
      } else {
        return utility.write(mapOutput, JSON.stringify(map, null, '    '));
      }
    }
  };

  buildFile = function(config, file, id) {
    var input, output, outputFile;

    outputFile = getOutputFile(config, file, id);
    if (!fs.existsSync(file)) {
      copySourceMap(config, file, outputFile, true);
      deleteFile(outputFile);
      return;
    }
    if (id == null) {
      id = getModuleId(config, file);
    }
    input = utility.read(file);
    output = "(function(){require.register('" + id + "',function(module,exports,require){" + input + "\n})})()";
    utility.write(outputFile, output);
    log(config, "Wrapped " + outputFile);
    return copySourceMap(config, file, outputFile);
  };

  buildIncludes = function(config) {
    var base, file, includeFile, list, script, webroot, _i, _len, _ref;

    list = utility.list(getOutputModuleDirectory(config), {
      include: ".js"
    });
    list = list.map(function(x) {
      return np.relative(config.output.directory, x).replace(/\\/g, '\/');
    });
    list = list.sort(function(a, b) {
      var aa, aitem, bb, bitem, compare, index, _i, _len;

      aa = a.split('/');
      bb = b.split('/');
      if (aa.length !== bb.length) {
        return aa.length - bb.length;
      }
      for (index = _i = 0, _len = aa.length; _i < _len; index = ++_i) {
        aitem = aa[index];
        bitem = bb[index];
        compare = aitem.localeCompare(bitem);
        if (compare !== 0) {
          return compare;
        }
      }
      return 0;
    });
    script = "";
    webroot = (_ref = config.output.webroot) != null ? _ref : config.output.directory;
    base = np.relative(webroot, config.output.directory).replace(/\\/g, '\/');
    base = ("/" + base + "/").replace(/\/+/, '/');
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      file = list[_i];
      script += "document.writeln(\"<script src='" + base + file + "'></script>\");\n";
    }
    includeFile = np.join(config.output.directory, "debug.js");
    utility.write(includeFile, script);
    log(config, "Created " + includeFile);
    return buildBrowserTestFile(config);
  };

  copyRequire = function(config) {
    var source, target;

    source = np.join(__dirname, 'require.js');
    if (!fs.existsSync(source)) {
      source = np.join(__dirname, '../lib/require.js');
    }
    target = np.join(getOutputModuleDirectory(config), 'require.js');
    if (!fs.existsSync(target)) {
      utility.copy(source, target);
      return log(config, "Copied " + target);
    }
  };

  check = function(config) {
    var key, value, _ref;

    if ((config != null ? config.input : void 0) == null) {
      throw new Error("config.input is required");
    }
    _ref = config.input;
    for (key in _ref) {
      value = _ref[key];
      config[key] = np.normalize(value);
    }
  };

  getDependencies = function(file, id, deps) {
    var content, dependentFile, fileId, getRelativeFileAndIds, name, names, recurseId, _i, _len, _ref;

    if (deps == null) {
      deps = {};
    }
    getRelativeFileAndIds = function(name) {
      var dependent, dependentId, recurseId;

      dependent = np.normalize(np.join(np.dirname(file), name) + ".js");
      dependentId = np.join(id, name).replace(/\\/g, '\/');
      recurseId = dependentId;
      if (!fs.existsSync(dependent)) {
        dependent = np.normalize(np.join(np.dirname(file), name) + "/index.js");
        dependentId = np.join(id, name).replace(/\\/g, '\/') + "/index";
      }
      return [dependent, dependentId, recurseId];
    };
    content = utility.read(file);
    names = utility.getMatches(content, /\brequire\s*\(\s*(['"][^'"]+['"])\s*\)/g, 1);
    names = names.map(function(x) {
      return eval(x);
    });
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      if (!(name[0] === '.')) {
        continue;
      }
      _ref = getRelativeFileAndIds(name), dependentFile = _ref[0], fileId = _ref[1], recurseId = _ref[2];
      if (!fs.existsSync(dependentFile)) {
        console.warn("file not found " + dependentFile + " referenced from " + file);
        continue;
      }
      if (!deps[dependentFile]) {
        deps[dependentFile] = fileId;
        getDependencies(dependentFile, recurseId, deps);
      }
    }
    return deps;
  };

  buildStatic = function(config, moduleId) {
    var deps, e, file, id, main, _results;

    main = (function() {
      try {
        return require.resolve(moduleId);
      } catch (_error) {
        e = _error;
        return null;
      }
    })();
    if (main == null) {
      throw new Error("Module not found: " + moduleId);
    }
    deps = {};
    deps[main] = moduleId + "/index";
    deps = getDependencies(main, moduleId, deps);
    _results = [];
    for (file in deps) {
      id = deps[file];
      _results.push(buildFile(config, file, id));
    }
    return _results;
  };

  buildCommon = function(config) {
    var input, name, _ref, _results;

    check(config);
    copyRequire(config);
    _ref = config.input;
    _results = [];
    for (name in _ref) {
      input = _ref[name];
      if (input === true) {
        _results.push(buildStatic(config, name));
      }
    }
    return _results;
  };

  exports.build = function(config, callback) {
    var file, input, list, name, _i, _len, _ref;

    buildCommon(config);
    _ref = config.input;
    for (name in _ref) {
      input = _ref[name];
      if (!(Object.isString(input))) {
        continue;
      }
      list = utility.list(input, {
        include: ".js"
      });
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        buildFile(config, file);
      }
    }
    buildIncludes(config);
    return typeof callback === "function" ? callback() : void 0;
  };

  exports.watch = function(config) {
    var input, name, _ref, _results;

    buildCommon(config);
    buildIncludes(config);
    _ref = config.input;
    _results = [];
    for (name in _ref) {
      input = _ref[name];
      if (Object.isString(input)) {
        _results.push(watcher.watchDirectory(input, {
          include: ".js",
          initial: false
        }, function(file, curr, prev, change) {
          buildFile(config, file);
          if (change === "deleted" || change === "created") {
            return buildIncludes(config);
          }
        }));
      }
    }
    return _results;
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/

})})()