// Generated by CoffeeScript 1.6.2
(function() {
  var buildBrowserTestFile, buildFile, buildIncludes, check, copyRequire, copySourceMap, deleteFile, fs, getBaseModuleName, getInputDirectory, getModuleId, getOutputFile, log, np, utility, watcher;

  require('sugar');

  utility = require("glass-platform/node/build/utility");

  watcher = require("glass-platform/node/build/watcher");

  np = require("path");

  fs = require('fs');

  log = function(config, message) {
    if (!config.silent) {
      return console.log(message);
    }
  };

  getInputDirectory = function(config, file) {
    var input, name, _ref;

    _ref = config.input;
    for (input in _ref) {
      name = _ref[input];
      if (file.startsWith(input)) {
        return input;
      }
    }
    throw new Error("input not found in config.input: " + file);
  };

  getBaseModuleName = function(config, file) {
    return config.input[getInputDirectory(config, file)];
  };

  getModuleId = function(config, file) {
    var inputDirectory, name, path;

    name = getBaseModuleName(config, file);
    inputDirectory = getInputDirectory(config, file);
    path = np.relative(inputDirectory, file);
    path = path.replace(/\\/g, "\/");
    path = name + "/" + path;
    path = path.replace(/\/$/, "");
    return path = path.replace(/\.js$/, "");
  };

  getOutputFile = function(config, file) {
    var inputDirectory, name, path;

    name = getBaseModuleName(config, file);
    inputDirectory = getInputDirectory(config, file);
    path = np.relative(inputDirectory, file);
    path = path.replace(/\\/g, "\/");
    path = name + "/" + path;
    return path = np.join(config.output.directory, path);
  };

  deleteFile = function(file) {
    if (fs.existsSync(file)) {
      return fs.unlinkSync(file);
    }
  };

  buildBrowserTestFile = function(config) {
    var testFile;

    if (config.output.test === 'mocha') {
      testFile = "" + config.output.directory + "/test.html";
      if (!fs.existsSync(testFile)) {
        fs.writeFileSync(testFile, "<html>\n    <head>\n        <title>Mocha Test</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://raw.github.com/visionmedia/mocha/master/mocha.css\">\n        <script src=\"https://raw.github.com/visionmedia/mocha/master/mocha.js\"></script>\n        <script>mocha.setup('bdd');</script>\n        <script src=\"require.js\"></script>\n        <script src=\"" + config.output.include.name + "\"></script>\n    </head>\n    <body>\n        <div id=\"mocha\"></div>\n        <script>\n        mocha.setup('bdd');\n        mocha.run();\n        </script>\n    </body>\n</html>", "utf8");
        return console.log("Created " + (np.normalize(testFile)));
      }
    }
  };

  copySourceMap = function(config, inputFile, outputFile, deleteOutput) {
    var copyTo, e, index, map, mapInput, mapOutput, shortName, source, _i, _len, _ref;

    if (deleteOutput == null) {
      deleteOutput = false;
    }
    mapInput = inputFile.replace(/\.js$/, ".map");
    mapOutput = outputFile.replace(/\.js$/, ".map");
    if (fs.existsSync(mapInput)) {
      try {
        map = JSON.parse(utility.read(mapInput));
      } catch (_error) {
        e = _error;
        map = {
          sourceRoot: ".",
          sources: []
        };
      }
      _ref = map.sources;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        source = _ref[index];
        source = np.join(np.dirname(mapInput), map.sourceRoot, source);
        copyTo = np.join(np.dirname(mapOutput), shortName = source.split(/[\/\\]/g).pop());
        if (deleteOutput) {
          deleteFile(copyTo);
        } else {
          if (!fs.existsSync(source)) {
            console.warn("Source not found: " + mapInput + " -> " + source);
            continue;
          }
          utility.copy(source, copyTo);
        }
        map.sources[index] = shortName;
      }
      map.sourceRoot = ".";
      if (deleteOutput) {
        deleteFile(mapInput);
        return deleteFile(mapOutput);
      } else {
        return utility.write(mapOutput, JSON.stringify(map, null, '    '));
      }
    }
  };

  buildFile = function(config, file) {
    var id, input, output, outputFile;

    outputFile = getOutputFile(config, file);
    if (!fs.existsSync(file)) {
      copySourceMap(config, file, outputFile, true);
      deleteFile(outputFile);
      return;
    }
    id = getModuleId(config, file);
    input = utility.read(file);
    output = "(function(){require.register('" + id + "',function(module,exports,require){" + input + "\n})})()";
    utility.write(outputFile, output);
    log(config, "Wrapped " + outputFile);
    if (config.output.debug) {
      return copySourceMap(config, file, outputFile);
    }
  };

  buildIncludes = function(config) {
    var base, file, includeFile, list, script, _i, _len, _ref;

    if (config.output.include == null) {
      return;
    }
    list = utility.list(config.output.directory, {
      include: ".js",
      exclude: [config.output.include.name, "require.js"]
    });
    list = list.map(function(x) {
      return np.relative(config.output.directory, x).replace(/\\/g, '\/');
    });
    list = list.sort(function(a, b) {
      return a.length - b.length;
    });
    script = "";
    base = (_ref = config.output.include.base) != null ? _ref : "";
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      file = list[_i];
      script += "document.writeln(\"<script src='" + base + file + "'></script>\");\n";
    }
    includeFile = np.join(config.output.directory, config.output.include.name);
    utility.write(includeFile, script);
    log(config, "Created " + includeFile);
    return buildBrowserTestFile(config);
  };

  copyRequire = function(config) {
    var source, target;

    source = np.join(__dirname, '../www/require.js');
    target = np.join(config.output.directory, 'require.js');
    if (!fs.existsSync(target)) {
      utility.copy(source, target);
      return log(config, "Copied " + target);
    }
  };

  check = function(config) {
    var key, value, _ref;

    if ((config != null ? config.input : void 0) == null) {
      throw new Error("config.input is required");
    }
    _ref = config.input;
    for (key in _ref) {
      value = _ref[key];
      if (value === true) {
        value = key.split(/[\/\\]/g).pop();
      }
      delete config.input[key];
      config.input[np.normalize(key)] = value;
    }
  };

  exports.build = function(config, callback) {
    var file, input, list, _i, _len;

    check(config);
    for (input in config.input) {
      list = utility.list(input, {
        include: ".js"
      });
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        buildFile(config, file);
      }
    }
    buildIncludes(config);
    copyRequire(config);
    return typeof callback === "function" ? callback() : void 0;
  };

  exports.watch = function(config) {
    var input, _results;

    check(config);
    buildIncludes(config);
    copyRequire(config);
    _results = [];
    for (input in config.input) {
      _results.push(watcher.watchDirectory(input, {
        include: ".js",
        initial: false
      }, function(file, curr, prev, change) {
        buildFile(config, file);
        if (change === "deleted" || change === "created") {
          return buildIncludes(config);
        }
      }));
    }
    return _results;
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
